# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "debian/bullseye64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  config.vm.provision "shell", inline: <<-SHELL
    cd ~/
    apt-get update;
    apt-get upgrade;
    apt-get install -y apt-file autoconf build-essential chrpath curl default-jdk devscripts flex git vim libncurses5-dev libpam-dev xsltproc libgnutls-openssl-dev libkrb5-dev wget libz-dev libssl-dev && apt-get -y clean
#    wget https://www.openssl.org/source/old/0.9.x/openssl-0.9.8g.tar.gz
#    tar -xvf openssl-0.9.8g.tar.gz
#    cd openssl-0.9.8g
#    ./config no-asm --prefix="/root/openssl" shared zlib -fPIC -no-asm
#    mv /usr/bin/pod2man /usr/bin/pod2man.bak
#    make depend
#    make
#    make install
#    cd ../
    su vagrant
    cd ~/
    curl -O https://raw.githubusercontent.com/spawngrid/kerl/master/kerl
    chmod a+x kerl
    echo 'KERL_CONFIGURE_OPTIONS="--disable-hipe --enable-smp-support --enable-threads
                        --enable-kernel-poll --without-odbc --disable-dynamic-ssl-lib"' > ~/.kerlrc
#    export CFLAGS="-DOPENSSL_NO_EC=1"
     echo "OTP 22.3 should build. However OTP 20.3 may have build issues. OTP 20.3 is not critical to build"
     ./kerl build 22.3
     ./kerl install 22.3 ~/erlang/22.3/
     ./kerl build 20.3
     ./kerl install 20.3 ~/erlang/20.3/
#    ./kerl build git git://github.com/basho/otp.git OTP_R16B02_basho10 R16B02-basho10
#    ./kerl install R16B02-basho10 ~/erlang/R16B02-basho10
#    . ~/erlang/R16B02-basho10/activate
     echo ". ~/erlang/22.3/activate" >> ~/.bashrc
     git clone https://github.com/basho/riak.git
     git clone https://github.com/basho/riak_cs.git
     git clone https://github.com/basho/stanchion.git
     for i in $(ls /vagrant | grep -v "Vagrantfile"); do sudo cp /vagrant/$i /usr/bin/; sudo chmod +x /usr/bin/$i; done
     echo "Assuming no errors, all the Riak 3.x.x family of products can be built and packaged via the build scripts e.g. 'cd ~/riak; buildriak3 riak-3.0.11'"
   SHELL
end
